(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{327:function(i,v,t){"use strict";t.r(v);var _=t(3),e=Object(_.a)({},(function(){var i=this,v=i.$createElement,t=i._self._c||v;return t("ContentSlotsDistributor",{attrs:{"slot-key":i.$parent.slotKey}},[t("h2",{attrs:{id:"git"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#git"}},[i._v("#")]),i._v(" git")]),i._v(" "),t("h3",{attrs:{id:"git-的基本指令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#git-的基本指令"}},[i._v("#")]),i._v(" git 的基本指令")]),i._v(" "),t("ol",[t("li",[i._v("初始化")])]),i._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[i._v('git config --global user.name "你的用户名" // 全局配置用户信息\ngit config --global user.email "你的邮箱"\ngit config --global --unset user.name // 删除配置的全局用户信息\ngit config --global --unset user.email \ngit config --list\n')])]),i._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[i._v("1")]),t("br"),t("span",{staticClass:"line-number"},[i._v("2")]),t("br"),t("span",{staticClass:"line-number"},[i._v("3")]),t("br"),t("span",{staticClass:"line-number"},[i._v("4")]),t("br"),t("span",{staticClass:"line-number"},[i._v("5")]),t("br")])]),t("ol",{attrs:{start:"2"}},[t("li",[t("p",[i._v("初始化仓库 "),t("code",[i._v("git init")]),i._v(" "),t("strong",[i._v("hooks")]),i._v(": 目录包含客户端或服务端的钩子脚本\n"),t("strong",[i._v("info")]),i._v(": 包含全局性排除文件\n"),t("strong",[i._v("logs")]),i._v(": 保存日志信息\n"),t("strong",[i._v("objects")]),i._v(": 目录存储所有数据内容\n"),t("strong",[i._v("refs")]),i._v(": 目录存储指向数据（分支）的提交对象的指针\n"),t("strong",[i._v("config")]),i._v(": 文件包含项目特有的配置选项\n"),t("strong",[i._v("description")]),i._v(": 用来显示对仓库的描述信息\n"),t("strong",[i._v("HEAD")]),i._v(": 文件指示目前被检出的分支\n"),t("strong",[i._v("index")]),i._v(": 文件保存暂存区信息")])]),i._v(" "),t("li",[t("p",[i._v("git 操作最基本的流程\n创建工作目录 对工作目录进行修改")]),i._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[i._v('git add .\n  git hash-object -w 文件名\n  git update-index ...\ngit commit -m "提交的解释信息"\n  git write-tree\n  git commit-tree\n')])]),i._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[i._v("1")]),t("br"),t("span",{staticClass:"line-number"},[i._v("2")]),t("br"),t("span",{staticClass:"line-number"},[i._v("3")]),t("br"),t("span",{staticClass:"line-number"},[i._v("4")]),t("br"),t("span",{staticClass:"line-number"},[i._v("5")]),t("br"),t("span",{staticClass:"line-number"},[i._v("6")]),t("br")])])]),i._v(" "),t("li",[t("p",[i._v("git 高层命令 CRUD")]),i._v(" "),t("ul",[t("li",[i._v("初始化新仓库 "),t("code",[i._v("git init")])]),i._v(" "),t("li",[i._v("检查当前文件状态 "),t("code",[i._v("git status")])]),i._v(" "),t("li",[i._v("将所有修改文件加到暂存区 "),t("code",[i._v("git add ./")])]),i._v(" "),t("li",[i._v("将暂存区的文件提交到版本库\n"),t("ul",[t("li",[t("code",[i._v("git commit")]),i._v(" 进入编辑器编辑解释信息")]),i._v(" "),t("li",[t("code",[i._v('git commit -m "解释信息"')])]),i._v(" "),t("li",[i._v("跳过使用暂存区域直接提交 "),t("code",[i._v('git commit -a -m "解释信息"')]),i._v(" "),t("em",[i._v("需要处于被跟踪状态")])])])]),i._v(" "),t("li",[i._v("查看已暂存和未暂存的更新\n"),t("ul",[t("li",[i._v("当前做的哪些更新还没有暂存 "),t("code",[i._v("git diff")])]),i._v(" "),t("li",[i._v("有哪些更新已经暂存起来准备下次提交 "),t("code",[i._v("git diff --staged")])])])]),i._v(" "),t("li",[i._v("查看提交的日志\n"),t("ul",[t("li",[t("code",[i._v("git log")])]),i._v(" "),t("li",[t("code",[i._v("git log --oneline")])])])]),i._v(" "),t("li",[t("code",[i._v("git rm 文件名")]),i._v(" 将工作目录中的对应文件删除并将修改加到暂存区")]),i._v(" "),t("li",[t("code",[i._v("git mv 源文件 重命名")]),i._v(" 将工作目录中的对应文件重命名并将修改加到暂存区")])])]),i._v(" "),t("li",[t("p",[i._v("分支")]),i._v(" "),t("ul",[t("li",[i._v("分支的本质是提交对象!!!")]),i._v(" "),t("li",[i._v("HEAD: 指向提交对象的指针, 默认指向 master, 切换分支就是让 HEAD 指向不同的提交对象\n每次有新的提交时 HEAD 都会带着当前指向的分支一起向前移动")]),i._v(" "),t("li",[t("code",[i._v("git branch")]),i._v(" 显示当前分支列表")]),i._v(" "),t("li",[i._v("创建分支 "),t("code",[i._v("git branch 分支名")])]),i._v(" "),t("li",[i._v("创建分支并切换 "),t("code",[i._v("git checkout -b 分支名")])]),i._v(" "),t("li",[i._v("切换分支 "),t("code",[i._v("git checkout 分支名")])]),i._v(" "),t("li",[i._v("强制删除分支 "),t("code",[i._v("git branch -D 分支名")]),i._v(" "),t("em",[i._v("不能自己删自己")])]),i._v(" "),t("li",[i._v("删除已经被合并的分支或者空分支 "),t("code",[i._v("git branch -d 分支名")])]),i._v(" "),t("li",[i._v("查看项目分叉历史 "),t("code",[i._v("git log --oneline --decorate --graph --all")])]),i._v(" "),t("li",[i._v("查看每一个分支最后一次的提交对象 "),t("code",[i._v("git branch -v")])]),i._v(" "),t("li",[i._v("新建分支并且使分支指向相应的提交对象 "),t("code",[i._v("git branch 分支名 提交对象Hash")])]),i._v(" "),t("li",[i._v("合并分支 "),t("code",[i._v("git merge 分支名")])]),i._v(" "),t("li",[i._v("查看已经合并到当前分支的分支列表 "),t("code",[i._v("git branch --merged")])]),i._v(" "),t("li",[i._v("查看没有合并到当前分支的分支列表 "),t("code",[i._v("git branch --no-merged")])])])]),i._v(" "),t("li",[t("p",[i._v("配置别名\n"),t("code",[i._v("git config --global alias.别名 命令")]),i._v(" "),t("em",[i._v("若命令为单个单词，不需要引号，否则需要加引号")]),i._v("\n例如：")]),i._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[i._v('git config --global alias.co checkout \ngit config --global alias.ci commit\ngit config --global alias.st status\ngit config --global alias.det "log --oneline --decorate --graph --all"\n')])]),i._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[i._v("1")]),t("br"),t("span",{staticClass:"line-number"},[i._v("2")]),t("br"),t("span",{staticClass:"line-number"},[i._v("3")]),t("br"),t("span",{staticClass:"line-number"},[i._v("4")]),t("br")])]),t("blockquote",[t("p",[i._v("输入 git commit 时，只需输入 git ci")])])]),i._v(" "),t("li",[t("p",[i._v("git 存储")]),i._v(" "),t("ul",[t("li",[t("code",[i._v("git stash")]),i._v(" 将未完成的修改保存到一个栈上")]),i._v(" "),t("li",[t("code",[i._v("git stash list")]),i._v(" 查看存储")]),i._v(" "),t("li",[t("code",[i._v("git stash apply stash@{2}")]),i._v(" 应用指定的储藏，若不指定默认应用最近的储藏")]),i._v(" "),t("li",[t("code",[i._v("git stash drop stash@{2}")]),i._v(" 移除指定的储藏")]),i._v(" "),t("li",[t("code",[i._v("git stash pop")]),i._v(" 应用最近的储藏，并从栈中移除它")])])]),i._v(" "),t("li",[t("p",[i._v("撤销")]),i._v(" "),t("ul",[t("li",[i._v("撤回工作区的修改 "),t("code",[i._v("git checkout -- <文件名>")])]),i._v(" "),t("li",[i._v("撤回暂存区的暂存 "),t("code",[i._v("git reset HEAD <文件名>")])]),i._v(" "),t("li",[i._v("重新提交修改上一次的提交注释 "),t("code",[i._v("git commit --amend")])])])]),i._v(" "),t("li",[t("p",[i._v("重置（三部曲）")]),i._v(" "),t("ul",[t("li",[i._v("第一部:\n"),t("ul",[t("li",[t("code",[i._v("git reset --soft HEAD~")]),i._v(" 只动 HEAD, 但会带着分支一起移动, 不会修改工作目录和暂存区")]),i._v(" "),t("li",[t("code",[i._v("git reflog")]),i._v(" 打印 HEAD 修改日志\n"),t("code",[i._v("git reset --soft HEAD <hash>")]),i._v(" 移动到指定 hash 的分支")])])]),i._v(" "),t("li",[i._v("第二部:\n"),t("ul",[t("li",[t("code",[i._v("git reset [--mixed] HEAD~")]),i._v(" 动 HEAD, 同样带着分支一起移动, 还会将暂存区的东西回滚到上一次暂存")])])]),i._v(" "),t("li",[i._v("第三部:\n"),t("ul",[t("li",[t("code",[i._v("git reset --hard HEAD~")]),i._v(" 撤销最后的 "),t("code",[i._v("git add")]),i._v(" 和 "),t("code",[i._v("git commit")]),i._v(" 命令以及工作目录的所有工作")])])])])]),i._v(" "),t("li",[t("p",[i._v("打 tag")]),i._v(" "),t("ul",[t("li",[t("code",[i._v("git tag <tagName>")]),i._v(" 给最近的一个提交对象打 tag")]),i._v(" "),t("li",[t("code",[i._v("git tag <tagName> <commitHash>")]),i._v(" 指定提交对象打 tag")]),i._v(" "),t("li",[i._v("问题：使用 "),t("code",[i._v("git checkout <tagName>")]),i._v(" 会出现头部分离\n解决方法："),t("code",[i._v("git checkout -b <分支名>")]),i._v(" 创建一个分支，让 HEAD 指向它")])])]),i._v(" "),t("li",[t("p",[i._v("远程仓库")]),i._v(" "),t("ul",[t("li",[i._v("配置远程别名 "),t("code",[i._v("git remote add 别名 远程仓库地址")])]),i._v(" "),t("li",[i._v("配置用户信息"),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[i._v('git config user.name "huangzhongbo"\ngit config user.email "huangzhongbo@cmict.chinamobile.com"\n')])]),i._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[i._v("1")]),t("br"),t("span",{staticClass:"line-number"},[i._v("2")]),t("br")])])]),i._v(" "),t("li",[i._v("克隆仓库到本地 "),t("code",[i._v("git clone 仓库地址")])])]),i._v(" "),t("blockquote",[t("p",[i._v("只有在克隆仓库时，本地分支和远程跟踪分支有同步关系，可以直接 "),t("code",[i._v("git push")])])]),i._v(" "),t("ul",[t("li",[t("p",[i._v("更新修改")]),i._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[i._v("git fetch 别名（将修改同步到远程跟踪分支）\ngit merge 远程跟踪分支\n")])]),i._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[i._v("1")]),t("br"),t("span",{staticClass:"line-number"},[i._v("2")]),t("br")])])]),i._v(" "),t("li",[t("p",[i._v("本地分支跟踪远程分支 "),t("code",[i._v("git branch -u 远程跟踪分支")])])]),i._v(" "),t("li",[t("p",[i._v("公开分享一个分支，将其推送到远程仓库 "),t("code",[i._v("git push 别名 分支名")])])]),i._v(" "),t("li",[t("p",[i._v("本地新建分支并制定远程跟踪分支 "),t("code",[i._v("git branch -b 分支名 [remoteName]/[branch]")]),i._v(" 快捷方式 "),t("code",[i._v("git branch --track [remoteName]/[branch]")])])]),i._v(" "),t("li",[t("p",[i._v("查看设置的所有跟踪分支 "),t("code",[i._v("git branch -vv")])])]),i._v(" "),t("li",[t("p",[i._v("删除远程分支")]),i._v(" "),t("ol",[t("li",[t("code",[i._v("git push origin --delete 分支名")]),i._v(" 删除远程分支")]),i._v(" "),t("li",[t("code",[i._v("git remote prune origin --dry-run")]),i._v(" 列出仍在远程跟踪，但是远程已被删除的无用分支")]),i._v(" "),t("li",[t("code",[i._v("git remote prune origin")]),i._v(" 清除上面命令列出来的远程分支")])])]),i._v(" "),t("li",[t("p",[i._v("下载指定远程仓库分支 "),t("code",[i._v("git clone -b 分支名 ssh地址")])])])])]),i._v(" "),t("li",[t("p",[i._v("pull request")]),i._v(" "),t("ul",[t("li",[i._v("当已经 fork 了一次，需要重新提 pull request\n"),t("ol",[t("li",[t("code",[i._v("git remote add <shortname 源仓库> <url 源仓库地址>")])]),i._v(" "),t("li",[t("code",[i._v("git fetch 远程仓库名字")])]),i._v(" "),t("li",[t("code",[i._v("git branch -u 远程跟踪分支")])])])])])]),i._v(" "),t("li",[t("p",[i._v("git 的核心概念")]),i._v(" "),t("ol",[t("li",[i._v("三个区域：工作目录、暂存区、版本库")]),i._v(" "),t("li",[i._v("三个对象：git对象、tree对象、commit对象")]),i._v(" "),t("li",[i._v("三种分支：本地分支、远程追踪分支、远程分支")])])])]),i._v(" "),t("h3",{attrs:{id:"github-的基本流程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#github-的基本流程"}},[i._v("#")]),i._v(" github 的基本流程")]),i._v(" "),t("ol",[t("li",[i._v("项目经理建立空的远程仓库")]),i._v(" "),t("li",[i._v("项目经理建立待推送的本地仓库")]),i._v(" "),t("li",[i._v("初始化本地仓库")]),i._v(" "),t("li",[i._v("修改本地仓库")]),i._v(" "),t("li",[i._v("推送到远程仓库")]),i._v(" "),t("li",[i._v("添加成员权限")]),i._v(" "),t("li",[i._v("成员克隆仓库")]),i._v(" "),t("li",[i._v("成员推送自己的修改")]),i._v(" "),t("li",[i._v("项目经理拉取成员的修改")])])])}),[],!1,null,null,null);v.default=e.exports}}]);